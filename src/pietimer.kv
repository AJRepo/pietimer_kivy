# Copyright AJRepo@github 2023
#:import sin math.sin
#:import cos math.cos
#:import pi math.pi
#:import Label kivy.uix.label.Label
#:set pie_bg_color [1, 1, 1]
#:set text_color [.1, .1, .1]
#:set text_area_hint [.5, None]
#:set pie_radius_factor .74
#:set p2_size '20sp', '30sp'

#The main interface - must be class name? Only one root objec is allowed by .kv
TimerPager:

#Dynamic Class: Used for h,m,s buttons (Templates Deprecated 1.7 onward)
<TimerButton@Button>:
    disabled: True
    background_normal: ''
    background_disabled_normal: self.background_normal
    background_color: (.9,.9,.9,1)
    #font_size: self.width/1.5
    font_size: '22sp'
    size: 40,50
    color: text_color
#Dynamic Class: Used for h,m,s TextInputs
<TimerText@TextInput>:
    background_normal: ''
    background_disabled_normal: self.background_normal
    background_color: (.9,.9,.9,1)
    #font_size: self.width/1.75
    font_size: '22sp'
    multiline: False
    halign: 'center'
    color: text_color
    write_tab: False
#Dynamic Class: Used for h,m,s buttons (Templates Deprecated 1.7 onward)
<P2TimerButton@Button>:
    disabled: True
    background_normal: ''
    background_disabled_normal: self.background_normal
    background_color: (.9,.9,.9,1)
    #font_size: self.width/1.5
    font_size: '15sp'
    color: text_color
#Dynamic Class: Used for h,m,s TextInputs
<P2TimerText@TextInput>:
    background_normal: ''
    background_disabled_normal: self.background_normal
    background_color: (.9,.9,.9,1)
    #font_size: self.width/1.75
    font_size: '15sp'
    multiline: False
    halign: 'center'
    color: text_color
    write_tab: False
    size_hint: .25,1

<TimerPager>:
    border: 0
    AnalogClockFace:
    BoxLayout:
        orientation: 'vertical'
        background_color: (.9,.1,.9,1)
        #Bubble:
        #    #arrow_image: './arrow_r_sm.png'
        #    size_hint: 1, .2
        #    #arrow_pos: 'top_mid'
        #    #arrow_pos: 'right_mid'
        #    #arrow_pos: 'bottom_mid'
        #    #background_color: .9, .6, .7, 1
        #    background_color: (.9,.1,.9,1)
        #    BubbleContent:
        #        background_color: (.9,.1,.9,1)
        #        BubbleButton:
        #            background_color: (.9,.1,.9,1)
        #            text: 'reset'
        #        BubbleButton:
        #            background_color: (.1,1,.1,1)
        #            text: 'hello'
        #        BubbleButton:
        #            text: 'foo'
        Time1Controls:
            size_hint: 1,None
            size: p2_size
        Time2Controls:
            size_hint: 1,None
            size: p2_size
        BoxLayout:
            size_hint: 1, None
            size: 40, 30   #x will be ignored
            Widget:
                size_hint: .2,1
            P2TimerText:
                text: "4"
                size: p2_size
                disabled: app.running
            P2TimerText:
                text: "Loops"
                disabled: True
            Widget:
                size_hint: .2,1
        Time3Controls:
            size_hint: 1,None
            size: p2_size
        Widget:
        BoxLayout:
            size_hint: 1, .25
            Button:
                size_hint: .3, .6  #fraction of fraction
                text: app.start_stop_text
                background_color: app.start_stop_color
                on_press: app.toggle_running(self)
            Widget:
            Image: 
                size_hint: .2, 1
                source: './arrow_r_sm.png'
                #name=allow_stretch of object ... will be removed in future version
                #allow_stretch: False
                #background_normal: 'arrow_rlt_sm.png'

<Time1Controls>:
    id: page_controls
    Switch:
        id: "tb1"
        size_hint: .5, 1
        text: "Time1 On "
        disabled: True
        active: True
        opacity: 0
        #on_press: self.text = "Time1 On " if self.text=="Time1 Off" else "Time1 Off"
        #background_disabled_normal: self.background_normal #this is an image
        #background_color: "green"
    P2TimerText:
        id: pc_hours
        name: "hrs_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_min
        name: "min_tt"
        text: "25"
        disabled: app.running  #change to True when clock is running
        on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_sec
        name: "sec_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        on_text_validate: app.set_new_time(self)
    Button:
        size_hint: .3,1
        #color: "black"
        disabled_color: "white"
        text: "Time 1"
        disabled: True
        background_disabled_normal: ""
        background_normal: ""
        #multiplier to the texture color. The default texture is grey, so just setting the background color will give a darker result. To set a plain color, set the background_normal to ''.
        background_color: "blue"
<Time2Controls>:
    id: time2controls
    Switch:
        id: "tb2"
        size_hint: .5, 1
        #state: "down"  #or "normal"
        active: False
        text: "Time2 On "
        #on_press: self.text = "Time2 On " if self.text=="Time2 Off" else "Time2 Off"
        disabled: app.running
        #background_color: (0,1,0,1)
        background_color: (.9,.9,.9,1)
        #background_normal: "(.9,.1,.1,1)"
    P2TimerText:
        id: pc_hours
        name: "hrs_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_min
        name: "min_tt"
        text: "05"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_sec
        name: "sec_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    Button:
        size_hint: .3,1
        color: "black"
        disabled_color: "black"
        text: "Time 2"
        disabled: True
        background_disabled_normal: ""
        background_normal: ""
        #multiplier to the texture color. The default texture is grey, so just setting the background color will give a darker result. To set a plain color, set the background_normal to ''.
        background_color: "orange"
<Time3Controls>:
    id: time3controls
    Switch:
        id: "tb3"
        #text: "Time3 On "
        size_hint: .5, 1
        #on_press: self.text = "Time3 On " if self.text=="Time3 Off" else "Time3 Off"
        disabled: app.running
        #background_color: (.9,.9,.9,1)
        background_color: (0,0,.99,1)
        background_normal: "(.99,0,0,1)"
        background_down: "(.99,0,0,1)"
    P2TimerText:
        id: pc_hours
        name: "hrs_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_min
        name: "min_tt"
        text: "20"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    P2TimerText:
        id: pc_sec
        name: "sec_tt"
        text: "00"
        disabled: app.running  #change to True when clock is running
        #on_text_validate: app.set_new_time(self)
    Button:
        size_hint: .3,1
        color: "black"
        disabled_color: "black"
        text: "Time 3"
        disabled: True
        background_disabled_normal: ""
        background_normal: ""
        #multiplier to the texture color. The default texture is grey, so just setting the background color will give a darker result. To set a plain color, set the background_normal to ''.
        background_color: "red"

<AnalogClockFace>:
    #ID's create weak references
    id: "clock_obj"
    name: "clock_pie"
    #Don't use both size and size_hint (e.g. set size_hint = None for using size)
    #size: root.x, root.y
    #size_hint: 1,1
    #size: 0.9*min(root.size), 0.9*min(root.size)
    #size: 1.9*self.minium_height, 1.9*self.minumum_width
    FloatLayout:
        id: "pie"
        #size_hint: 1,1  #testing removing for android
        #size: 500, 400
        canvas:
            #can't have id for canvas
            #id: "piecanvas"
            Color:
                rgb: pie_bg_color
            Ellipse:
                group: "back_pie"
                #pos: self.pos
                #pos: self.x, self.y
                #Pos is the lower left corner of the square bounding the ellipse. Ugh.
                #pos: self.center_x - (0.37 * self.width), self.center_y - (0.37 * self.width)
                #pos: root.width/2 - (0.5 * self.width), root.height/2 - (0.5 * self.width)
                pos: root.width/2 - self.width * pie_radius_factor/2, root.height/2 - self.width * pie_radius_factor/2
                #Ellipse can't use pos_hint
                #pos: 0,50
                size: pie_radius_factor * self.width, pie_radius_factor * self.width
                #size: .25 * self.width, .25 * self.height
                #size: self.width, self.height
                #angle_start: 0
                #angle_end: 180
            Color:
                rgb: root.time_left_color
            Ellipse:
                group: "fore_pie"
                #Pos is the lower left corner of the square bounding the ellipse. Ugh.
                pos: root.width/2 - self.width * pie_radius_factor/2, root.height/2 - self.width * pie_radius_factor/2
                #pos: self.center_x, self.center_y
                #Ellipse can't use pos_hint
                #pos: 0,50
                size: pie_radius_factor * self.width, pie_radius_factor * self.width
                angle_start: 0
                angle_end: app.f_angle_end
        #this didn't work - don't know why
        #on_parent:
        #    for i in range(12): txt=str(i*5); self.add_widget(Label(text=txt,text_size=(None,None),size_hint=(.001,.001),pos=(root.center_x*(1 + 1.1*pie_radius_factor*sin(2*pi*i/12)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(2*pi*i/12) ), color=(0,1,0),font_size="22sp"))
        Label:
            text: "0"
            #text: str(sin(2*pi/12))
            #text: str(int(self.x))
            text_size: None,None
            #size: self.texture_size
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x, root.center_y + root.center_x*pie_radius_factor*1.1
        Label:
            text: "5"
            #text: str(root.center_x)
            #text: str(cos(2*pi/12))
            text_size: None,None  # Define the size of the text using font_size
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            #pos: root.width/2 + 1.1*pie_radius_factor*(root.width/2)*sin(2*pi/12), root.height/2 + 1.1*pie_radius_factor* (root.width/2) * cos(2*pi/12)
            #simplify the above and it becomes
            #pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(2*pi/12)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(2*pi/12)
            #simplify the above and it becomes
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(pi/6)
        Label:
            text: "10"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(2*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(2*pi/6)
        Label:
            text: "15"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(3*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(3*pi/6)
        Label:
            text: "20"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(4*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(4*pi/6)
        Label:
            text: "25"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(5*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(5*pi/6)
        Label:
            text: "30"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(6*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(6*pi/6)
        Label:
            text: "35"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(7*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(7*pi/6)
        Label:
            text: "40"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(8*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(8*pi/6)
        Label:
            text: "45"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(9*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(9*pi/6)
        Label:
            text: "50"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(10*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(10*pi/6)
        Label:
            text: "55"
            size_hint: .001,.001  #Make the frame around the label negligible.
            color: .3, .6, .7, 1
            font_size: '22sp'
            pos: root.center_x*(1 + 1.1*pie_radius_factor*sin(11*pi/6)), root.center_y + 1.1*pie_radius_factor* (root.center_x) * cos(11*pi/6)

    AnchorLayout:
        size_hint: 1,.9
        #pos_hint: {"x":0, "y":0}
        id: "text_time"
        BoxLayout:
            id: "bottom_buttons"
            anchor_x: 'center'
            anchor_y: 'center'
            size_hint: text_area_hint #see vars at top of page
            size: 20, root.width/8
            TimerButton:
                id: "hrs"
                text: app.str_hours
            TimerButton:
                id: "min"
                text: app.str_min
            TimerButton:
                id: "sec"
                text: app.str_sec
        BoxLayout:
            id: "top_text_boxes"
            anchor_x: 'center'
            anchor_y: 'center'
            size_hint: text_area_hint
            size: 20, root.width/8
            opacity: app.top_opacity
            #canvas:
            #    Color:
            #        rgb: .9,0,.9
            #    Rectangle:
            #        size: self.size
            #        pos: self.pos
            #See TimerText Parent Dynamic Class Above (child class)
            TimerText:
                id: "hrs_top"
                name: "hrs_tt"
                text: app.str_hours
                disabled: app.running  #change to True when clock is running
                on_text_validate: app.set_new_time(self)
            TimerText:
                id: "min_top"
                name: "min_tt"
                text: app.str_min
                disabled: app.running  #change to True when clock is running
                #Note: experimented with (self.name) but also requires self.text
                on_text_validate: app.set_new_time(self)
            TimerText:
                id: "sec_top"
                name: "sec_tt"
                text: app.str_sec
                disabled: app.running  #change to True when clock is running
                on_text_validate: app.set_new_time(self)

    AnchorLayout:
        id: "debug_buttons"
        anchor_x: 'center'
        anchor_y: 'bottom'
        Button:
            id: "debug_button"
            size_hint: .25, .1
            #pos_hint: {"x":0.8, "center_y":0.5}
            text: "DEBUG"
            on_press: app.print_debug(self)
            opacity: 0
            disabled: True

    AnchorLayout:
        id: 'moveout'
        anchor_x: 'right'
        anchor_y: 'bottom'
        size_hint: .1, .1
        opacity: app.menu_opacity
        #CustomHamburger:
        canvas.before:
            Color:
                rgba: 1, 1, 1, 1  # white color
            RoundedRectangle:
                pos: root.width - self.x - self.width * 1, self.y + self.height * 0.7
                size: self.width * 0.8, self.height * 0.1
                radius: 3,3,3,3
            RoundedRectangle:
                pos: root.width - self.x - self.width * 1, self.y + self.height * 0.5
                size: self.width * 0.8, self.height * 0.1
                radius: 3,3,3,3
            RoundedRectangle:
                pos: root.width - self.x - self.width * 1, self.y + self.height * 0.3
                #Rectangle can't use pos_hint
                #pos_hint: {"x":0, "y":0}
                size: self.width * 0.8, self.height * 0.1
                radius: 3,3,3,3
        #Image: 
        #    id: 'arrow_right'
        #    #size_hint very small required to move image around. 
        #    #size_hint: .1, .1
        #    size_hint: .1, .1
        #    fit_mode: "cover"
        #    #size: 35,35
        #    source: './menu_sm.png'

    AnchorLayout:
        id: "clock_buttons"
        anchor_x: 'left'
        anchor_y: 'bottom'
        Button:
            #FloatLayout only pos_hint and the size_hint properties of its children.
            id: "start_stop"
            size_hint: .2, .1
            background_color: app.start_stop_color
            #size_hint: None, None
            #size: 1.1* self.texture_size[0], 1.25* self.texture_size[1]
            #pos_hint: {"center_x":0.1, "center_y":0.1}
            text: app.start_stop_text
            on_press: app.toggle_running(self)


    #FloatLayout:
    #    id: "clock_buttons"
    #    size_hint: None, None
    #    size: 0.9*min(root.size), 0.9*min(root.size)
    #    pos_hint: {"center_x":0.5, "center_y":0.5}
    #    Button:
    #        #FloatLayout only pos_hint and the size_hint properties of its children.
    #        id: "start_stop"
    #        size_hint: None, None
    #        #size: "70dp","30dp"
    #        size: 1.1* self.texture_size[0], 1.25* self.texture_size[1]
    #        pos_hint: {"center_x":0.1, "center_y":0.1}
    #        text: "STOP"
    #        on_press: root.toggle_running(self)

#<Countdowntimer>:
#    Button:
#        text: "CountButton"
#        size: "100dp", "200dp"
#        pos: "100dp, 100dp"
#countdowntimer:
#CountdownTimer:
#
#<build>:
#    Button:
#        text: "HI"
# vim: ts=4 expandtab
